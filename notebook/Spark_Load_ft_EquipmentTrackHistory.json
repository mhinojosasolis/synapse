{
	"name": "Spark_Load_ft_EquipmentTrackHistory",
	"properties": {
		"folder": {
			"name": "Minecare/x_no usados"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SampleSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/dab9cf92-bd13-4888-9e53-624f4546db3c/resourceGroups/mbrs-rg-dev-copperdamart-001/providers/Microsoft.Synapse/workspaces/mbrs-synapse-dev-cym-001/bigDataPools/SampleSpark",
				"name": "SampleSpark",
				"type": "Spark",
				"endpoint": "https://mbrs-synapse-dev-cym-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SampleSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Notebook para carga inicial de dimensión dm_MaterialType"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"# Archivo final para la fact table\r\n",
					"nombre_archivo_ft = 'abfss://devproc@devmycdlake.dfs.core.windows.net/DataMultidim/minecare/ft_EquipmentTrackHistory.parquet'\r\n",
					"# nombre_archivo_historico = 'abfss://devproc@devmycdlake.dfs.core.windows.net/DataHistorica/minecare/EQUIPMENTTRACKHISTORY_HISTORICO.parquet'\r\n",
					"nombre_archivo_historico = 'abfss://devraw@devmycdlake.dfs.core.windows.net/minecare/history/EQUIPMENTTRACKHISTORY_HIS.parquet'\r\n",
					""
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# traemos los datos de origen incrementales\r\n",
					"df = spark.read.load(nombre_archivo_historico, format='parquet')\r\n",
					"display(df.limit(10))\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Se renombran las columnas y se generan los id dimensionales\r\n",
					"from pyspark.sql.functions import concat_ws, sha1, col, to_date, date_format,to_utc_timestamp, current_timestamp\r\n",
					"\r\n",
					"df = df.withColumnRenamed(\"Id\",\"id_equipTrackHis\").withColumnRenamed(\"EquipmentId\",\"id_Equipment\").withColumn(\"id_Location\",sha1(col(\"Location\"))).withColumn(\"id_Operator\",sha1(col(\"OperatorId\"))).withColumn(\"id_MaterialType\",sha1(col(\"MaterialType\"))).withColumn(\"id_LastAction\",sha1(col(\"LastAction\"))).withColumn(\"id_NextAction\",sha1(col(\"NextAction\"))).withColumn(\"BatchDate\", to_utc_timestamp(current_timestamp(), \"UTC\"))\r\n",
					"df = df.select(col(\"id_equipTrackHis\"),col(\"id_Equipment\"),col(\"SiteId\"),col(\"UpdateTime\"),col(\"ReadTime\"),col(\"id_Location\"),col(\"id_Operator\"),col(\"id_MaterialType\"),col(\"GpsLocation\"),col(\"id_LastAction\"),col(\"LastActionTime\"),col(\"id_NextAction\"),col(\"NextActionTime\"),col(\"ReasonCode\"),col(\"StatusId\"),col(\"MineRealmId\"),col(\"BatchDate\"))\r\n",
					"display(df.limit(10))"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Genero la dimensión final a grabar en el data lake"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# grabo la versión final de la dimension\r\n",
					"df.write.mode(\"overwrite\").parquet(nombre_archivo_ft)"
				],
				"attachments": null,
				"execution_count": 60
			}
		]
	}
}